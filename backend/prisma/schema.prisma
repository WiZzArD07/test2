// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id         String   @id @default(uuid())
  name       String
  currency   String   @db.VarChar(3)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  users      User[]
  workflows  Workflow[]
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  firstName    String
  lastName     String
  role         Role      @default(EMPLOYEE)
  companyId    String
  company      Company   @relation(fields: [companyId], references: [id])
  managerId    String?
  manager      User?     @relation("ManagerSubordinates", fields: [managerId], references: [id])
  subordinates User[]    @relation("ManagerSubordinates")
  expenses     Expense[]
  approvals    ExpenseApproval[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Expense {
  id                String            @id @default(uuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  amount            Float
  currency          String            @db.VarChar(3)
  category          String
  description       String?
  status            ExpenseStatus     @default(PENDING)
  date              DateTime
  receiptUrl        String?
  workflowId        String?
  workflow          Workflow?         @relation(fields: [workflowId], references: [id])
  approvals         ExpenseApproval[]
  currentStep       Int               @default(1)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime         @updatedAt
}

model Workflow {
  id          String    @id @default(uuid())
  name        String
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  steps       WorkflowStep[]
  expenses    Expense[]
  ruleType    WorkflowRuleType @default(SEQUENTIAL)
  ruleConfig  Json?     // e.g., {"percentage": 60} or {"approverId": "uuid"}
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model WorkflowStep {
  id          String   @id @default(uuid())
  workflowId  String
  workflow    Workflow @relation(fields: [workflowId], references: [id])
  stepNumber  Int
  approverRole Role // e.g., MANAGER, FINANCE
  
  @@unique([workflowId, stepNumber])
}

model ExpenseApproval {
  id              String         @id @default(uuid())
  expenseId       String
  expense         Expense        @relation(fields: [expenseId], references: [id])
  workflowStepId  String
  approverId      String?         // The user who took action
  approver        User?          @relation(fields: [approverId], references: [id])
  status          ApprovalStatus @default(PENDING)
  comments        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
  FINANCE
  DIRECTOR
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum WorkflowRuleType {
  SEQUENTIAL // All steps must be approved in order
  PERCENTAGE // A certain percentage of approvers must approve
  SPECIFIC_APPROVER // A specific approver's decision is final
}